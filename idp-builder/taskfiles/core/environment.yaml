version: '3'

# ===============================
# Environment Configuration Management
# ===============================

vars:
  ENV_FILE: '{{.ENV_FILE | default ".env"}}'
  # Standardized parameter names
  CLUSTER_NAME: '{{.CLUSTER_NAME | default "idp-cluster"}}'
  PROVIDER: '{{.PROVIDER | default "kind"}}'
  ENVIRONMENT: '{{.ENVIRONMENT | default "dev"}}'
  REGION: '{{.REGION | default "ap-southeast-1"}}'
  
  # Silent Mode Control
  SILENT_MODE: '{{.SILENT_MODE | default "false"}}'

tasks:

  # ===============================
  # Help and Information
  # ===============================

  help:
    desc: Show environment management help and available tasks
    silent: true
    cmds:
      - |
        cat << 'EOF'
        🌍 Environment Configuration Management
        =====================================
        
        Available Commands:
        ------------------
        validate              - Validate all required environment variables
        show-config          - Show current configuration values  
        set-variable         - Set environment variable safely (KEY and VALUE required)
        get-variable         - Retrieve environment variable value (KEY required)
        load-config          - Load configuration from environment file
        save-defaults        - Save current default values to environment file
        
        Usage Examples:
        --------------
        task environment:help
        task environment:validate
        task environment:show-config
        task environment:set-variable KEY=CLUSTER_NAME VALUE=my-cluster
        task environment:get-variable KEY=PROVIDER
        task environment:load-config
        task environment:save-defaults
        
        Environment Variables:
        ---------------------
        CLUSTER_NAME         - Name of the Kubernetes cluster (default: idp-cluster)
        PROVIDER            - Cloud provider (default: kind)
        ENVIRONMENT         - Environment type (default: dev)  
        REGION              - Cloud region (default: ap-southeast-1)
        
        Configuration Files:
        -------------------
        .env                - Environment variable file (customizable via ENV_FILE)
        EOF

  # ===============================
  # Environment Variable Management
  # ===============================

  validate:
    desc: Validate all required environment variables
    silent: true
    cmds:
      - |
        if [ "{{.SILENT_MODE}}" != "true" ]; then
          echo "Validating environment configuration..."
        fi
      - task: _validate-cluster-name
      - task: _validate-provider
      - task: _validate-environment
      - task: _validate-region
      - |
        if [ "{{.SILENT_MODE}}" != "true" ]; then
          echo "Environment validation passed"
        fi

  show-config:
    desc: Show current configuration values
    silent: true
    cmds:
      - |
        if [ "{{.SILENT_MODE}}" != "true" ]; then
          cat << 'EOF'
        Current Environment Configuration:
        ====================================
        CLUSTER_NAME: {{.CLUSTER_NAME}}
        PROVIDER: {{.PROVIDER}}
        ENVIRONMENT: {{.ENVIRONMENT}}
        REGION: {{.REGION}}
        EOF
        fi

  set-variable:
    desc: Set environment variable safely (KEY and VALUE required)
    silent: true
    vars:
      KEY: '{{.KEY}}'
      VALUE: '{{.VALUE}}'
    preconditions:
      - sh: '[ -n "{{.KEY}}" ]'
        msg: "KEY parameter is required"
      - sh: '[ -n "{{.VALUE}}" ]'
        msg: "VALUE parameter is required"
    cmds:
      - task: _validate-variable-name
        vars:
          KEY: '{{.KEY}}'
      - task: _update-environment-file
        vars:
          KEY: '{{.KEY}}'
          VALUE: '{{.VALUE}}'
      - |
        if [ "{{.SILENT_MODE}}" != "true" ]; then
          echo "Set {{.KEY}}={{.VALUE}} in {{.ENV_FILE}}"
        fi

  get-variable:
    desc: Retrieve environment variable value (KEY required)
    silent: true
    vars:
      KEY: '{{.KEY}}'
    preconditions:
      - sh: '[ -n "{{.KEY}}" ]'
        msg: "KEY parameter is required"
    cmds:
      - |
        if [ -f {{.ENV_FILE}} ] && grep -q "^{{.KEY}}=" {{.ENV_FILE}}; then
          value=$(grep "^{{.KEY}}=" {{.ENV_FILE}} | cut -d= -f2)
          echo "{{.KEY}}=$value"
        else
          echo "❌ Variable {{.KEY}} not found in {{.ENV_FILE}}"
          exit 1
        fi

  load-config:
    desc: Load configuration from environment file
    silent: true
    cmds:
      - |
        if [ -f {{.ENV_FILE}} ]; then
          if [ "{{.SILENT_MODE}}" != "true" ]; then
            echo "📂 Loading configuration from {{.ENV_FILE}}"
          fi
          set -a
          source {{.ENV_FILE}}
          set +a
          if [ "{{.SILENT_MODE}}" != "true" ]; then
            echo "Configuration loaded"
          fi
        else
          if [ "{{.SILENT_MODE}}" != "true" ]; then
            echo "⚠️ No {{.ENV_FILE}} file found, using defaults"
          fi
        fi

  save-defaults:
    desc: Save current default values to environment file
    silent: true
    cmds:
      - |
        if [ "{{.SILENT_MODE}}" != "true" ]; then
          echo "Saving default configuration to {{.ENV_FILE}}"
        fi
      - task: set-variable
        vars:
          KEY: "CLUSTER_NAME"
          VALUE: "{{.CLUSTER_NAME}}"
      - task: set-variable
        vars:
          KEY: "PROVIDER"
          VALUE: "{{.PROVIDER}}"
      - task: set-variable
        vars:
          KEY: "ENVIRONMENT"
          VALUE: "{{.ENVIRONMENT}}"
      - task: set-variable
        vars:
          KEY: "REGION"
          VALUE: "{{.REGION}}"
      - |
        if [ "{{.SILENT_MODE}}" != "true" ]; then
          echo "Default configuration saved"
        fi

  # ===============================
  # Internal Helper Tasks
  # ===============================

  _validate-cluster-name:
    internal: true
    silent: true
    cmds:
      - |
        CLUSTER_NAME="{{.CLUSTER_NAME}}"
        if [[ ! "$CLUSTER_NAME" =~ ^[a-z0-9]([a-z0-9-]*[a-z0-9])?$ ]]; then
          echo "❌ CLUSTER_NAME must be lowercase alphanumeric with hyphens {{.CLUSTER_NAME}}"
          exit 1
        fi
        if [ ${#CLUSTER_NAME} -gt 63 ]; then
          echo "❌ CLUSTER_NAME must be 63 characters or less {{.CLUSTER_NAME}}"
          exit 1
        fi
        if [ "{{.SILENT_MODE}}" != "true" ]; then
          echo "CLUSTER_NAME is valid {{.CLUSTER_NAME}}"
        fi

  _validate-provider:
    internal: true
    silent: true
    cmds:
      - |
        case "{{.PROVIDER}}" in
          kind|aws|gcp|azure)
            if [ "{{.SILENT_MODE}}" != "true" ]; then
              echo "PROVIDER is valid {{.PROVIDER}}"
            fi
            ;;
          *)
            echo "❌ PROVIDER must be one of kind, aws, gcp, azure (got {{.PROVIDER}})"
            exit 1
            ;;
        esac

  _validate-environment:
    internal: true
    silent: true
    cmds:
      - |
        case "{{.ENVIRONMENT}}" in
          dev|staging|production)
            if [ "{{.SILENT_MODE}}" != "true" ]; then
              echo "ENVIRONMENT is valid {{.ENVIRONMENT}}"
            fi
            ;;
          *)
            echo "❌ ENVIRONMENT must be one of dev, staging, production (got {{.ENVIRONMENT}})"
            exit 1
            ;;
        esac

  _validate-region:
    internal: true
    silent: true
    cmds:
      - |
        if [ -n "{{.REGION}}" ]; then
          if [ "{{.SILENT_MODE}}" != "true" ]; then
            echo "REGION is set {{.REGION}}"
          fi
        else
          if [ "{{.SILENT_MODE}}" != "true" ]; then
            echo "⚠️ REGION is not set, using default"
          fi
        fi

  _validate-variable-name:
    internal: true
    silent: true
    vars:
      KEY: '{{.KEY}}'
    cmds:
      - |
        if [[ ! "{{.KEY}}" =~ ^[A-Z_][A-Z0-9_]*$ ]]; then
          echo "❌ Variable name must be uppercase with underscores {{.KEY}}"
          exit 1
        fi

  _update-environment-file:
    internal: true
    silent: true
    vars:
      KEY: '{{.KEY}}'
      VALUE: '{{.VALUE}}'
    cmds:
      - |
        # Create env file if it doesn't exist
        touch {{.ENV_FILE}}
        
        # Remove existing line if present
        if grep -q "^{{.KEY}}=" {{.ENV_FILE}}; then
          # Use different delimiters to avoid conflicts with the variable content
          sed -i '/^{{.KEY}}=/d' {{.ENV_FILE}}
        fi
        
        # Add new line
        echo "{{.KEY}}={{.VALUE}}" >> {{.ENV_FILE}}
