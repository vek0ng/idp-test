version: '3'

# ===============================
# Networking and Ingress Management
# ===============================

vars:
  # Standardized parameters
  CLUSTER_NAME: '{{.CLUSTER_NAME | default "idp-cluster"}}'
  PROVIDER: '{{.PROVIDER | default "kind"}}'
  ENVIRONMENT: '{{.ENVIRONMENT | default "dev"}}'
  INGRESS_CLASS: '{{.INGRESS_CLASS | default "nginx"}}'
  DOMAIN: '{{.DOMAIN | default "local.dev"}}'
  
  # Silent Mode Control
  # SILENT_MODE: '{{.SILENT_MODE | default "false"}}'

tasks:

  # ===============================
  # Help and Information
  # ===============================

  help:
    desc: Show networking and ingress management help and available tasks
    silent: true
    cmds:
      - |
        cat << 'EOF'
        Networking and Ingress Management
        ===================================
        
        Available Commands:
        ------------------
        install-ingress          - Install ingress controller for the specified provider
        uninstall-ingress        - Uninstall ingress controller
        check-ingress-status     - Check status of ingress controller
        setup-load-balancer      - Setup load balancer based on provider
        setup-dns               - Setup DNS configuration (placeholder for future implementation)
        setup-certificates       - Setup certificate management (placeholder for future implementation)
        apply-network-policies   - Apply basic network policies for security
        
        Usage Examples:
        --------------
        task networking:help
        task networking:install-ingress PROVIDER=kind INGRESS_CLASS=nginx
        task networking:check-ingress-status
        task networking:setup-load-balancer PROVIDER=aws
        task networking:apply-network-policies
        task networking:uninstall-ingress
        
        Supported Providers:
        -------------------
        kind     - Local Kubernetes with port forwarding
        aws      - AWS Load Balancer Controller
        gcp      - GCP Load Balancer and Cloud DNS
        azure    - Azure Application Gateway
        
        Ingress Controllers:
        -------------------
        nginx    - NGINX Ingress Controller (default)
        traefik  - Traefik Ingress Controller
        istio    - Istio Gateway Controller
        
        Environment Variables:
        ---------------------
        PROVIDER             - Cloud provider (default: kind)
        INGRESS_CLASS        - Ingress controller type (default: nginx)
        DOMAIN               - Base domain for ingress (default: local.dev)
        CLUSTER_NAME         - Cluster name (default: idp-cluster)
        ENVIRONMENT          - Environment type (default: dev)
        
        Provider-Specific Variables:
        ---------------------------
        AWS:
          AWS_REGION, VPC_ID, SUBNET_IDS, ACM_CERTIFICATE_ARN
        GCP:
          GOOGLE_CLOUD_PROJECT, CLOUD_DNS_ZONE, SSL_CERTIFICATE
        Azure:
          AZURE_RESOURCE_GROUP, AZURE_SUBSCRIPTION_ID, DNS_ZONE
        
        Quick Start:
        -----------
        1. task networking:install-ingress                    # Install ingress controller
        2. task networking:check-ingress-status              # Verify installation
        3. task networking:setup-load-balancer               # Setup load balancer
        4. task networking:apply-network-policies            # Apply security policies
        EOF

  # ===============================
  # Ingress Controller Management
  # ===============================

  install-ingress:
    desc: Install ingress controller for the specified provider
    silent: true
    vars:
      INGRESS_CLASS: '{{.INGRESS_CLASS}}'
      PROVIDER: '{{.PROVIDER}}'
    cmds:
      - |
        if [ "{{.SILENT_MODE}}" != "true" ]; then
          echo "Installing {{.INGRESS_CLASS}} ingress controller for {{.PROVIDER}} provider"
        fi
      - task: _install-{{.INGRESS_CLASS}}-ingress
        vars:
          PROVIDER: '{{.PROVIDER}}'
      - task: _wait-for-ingress-ready
        vars:
          INGRESS_CLASS: '{{.INGRESS_CLASS}}'
      - |
        if [ "{{.SILENT_MODE}}" != "true" ]; then
          echo "Ingress controller {{.INGRESS_CLASS}} installed successfully"
        fi

  uninstall-ingress:
    desc: Uninstall ingress controller
    silent: true
    vars:
      INGRESS_CLASS: '{{.INGRESS_CLASS}}'
    cmds:
      - |
        if [ "{{.SILENT_MODE}}" != "true" ]; then
          echo "Uninstalling {{.INGRESS_CLASS}} ingress controller"
        fi
      - task: _uninstall-{{.INGRESS_CLASS}}-ingress
      - |
        if [ "{{.SILENT_MODE}}" != "true" ]; then
          echo "Ingress controller {{.INGRESS_CLASS}} uninstalled"
        fi

  check-ingress-status:
    desc: Check status of ingress controller
    silent: true
    vars:
      INGRESS_CLASS: '{{.INGRESS_CLASS}}'
    cmds:
      - |
        if [ "{{.SILENT_MODE}}" != "true" ]; then
          echo "Checking ingress controller status"
        fi
      - |
        if kubectl get pods -n ingress-nginx -l app.kubernetes.io/name=ingress-nginx >/dev/null 2>&1; then
          if [ "{{.SILENT_MODE}}" != "true" ]; then
            echo "Nginx ingress controller is running"
            kubectl get pods -n ingress-nginx -l app.kubernetes.io/name=ingress-nginx
            echo ""
            echo "Ingress classes:"
            kubectl get ingressclass
          fi
        else
          echo "‚ùå No ingress controller found"
        fi

  # ===============================
  # Load Balancer Management
  # ===============================

  setup-load-balancer:
    desc: Setup load balancer based on provider
    silent: true
    vars:
      PROVIDER: '{{.PROVIDER}}'
    cmds:
      - |
        if [ "{{.SILENT_MODE}}" != "true" ]; then
          echo "Setting up load balancer for {{.PROVIDER}} provider"
        fi
      - task: _setup-{{.PROVIDER}}-load-balancer

  # ===============================
  # DNS and Certificate Management
  # ===============================

  setup-dns:
    desc: Setup DNS configuration (placeholder for future implementation)
    silent: true
    vars:
      DOMAIN: '{{.DOMAIN}}'
    cmds:
      - |
        echo "DNS setup for domain {{.DOMAIN}}"
        echo "DNS configuration is provider-specific and will be implemented in Phase 3"
        echo "For now, using local domain {{.DOMAIN}}"

  setup-certificates:
    desc: Setup certificate management (placeholder for future implementation)
    silent: true
    cmds:
      - |
        echo "Certificate management setup"
        echo "Certificate management will be implemented in Phase 3"
        echo "Consider using cert-manager for automated certificate management"

  # ===============================
  # Network Policies (Security)
  # ===============================

  apply-network-policies:
    desc: Apply basic network policies for security
    silent: true
    vars:
      ENVIRONMENT: '{{.ENVIRONMENT}}'
    cmds:
      - echo "üîí Applying network policies for {{.ENVIRONMENT}} environment"
      - |
        # Create a basic network policy for production environments
        if [ "{{.ENVIRONMENT}}" = "production" ]; then
          echo "Applying strict network policies for production"
          # Implementation will be added in Phase 3
        else
          echo "Using permissive network policies for {{.ENVIRONMENT}}"
        fi

  # ===============================
  # Internal Helper Tasks
  # ===============================

  _install-nginx-ingress:
    internal: true
    silent: true
    vars:
      PROVIDER: '{{.PROVIDER}}'
    cmds:
      - |
        case "{{.PROVIDER}}" in
          kind)
            echo "Installing nginx ingress for Kind"
            kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
            ;;
          aws)
            echo "Installing nginx ingress for AWS"
            kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/aws/deploy.yaml
            ;;
          gcp)
            echo "Installing nginx ingress for GCP"
            kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/gce/deploy.yaml
            ;;
          azure)
            echo "Installing nginx ingress for Azure"
            kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/aks/deploy.yaml
            ;;
          *)
            echo "Installing nginx ingress (generic cloud)"
            kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml
            ;;
        esac

  _uninstall-nginx-ingress:
    internal: true
    silent: true
    cmds:
      - |
        kubectl delete namespace ingress-nginx --ignore-not-found=true
        kubectl delete clusterrole ingress-nginx --ignore-not-found=true
        kubectl delete clusterrolebinding ingress-nginx --ignore-not-found=true

  _wait-for-ingress-ready:
    internal: true
    silent: true
    vars:
      INGRESS_CLASS: '{{.INGRESS_CLASS}}'
    cmds:
      - |
        echo "Waiting for ingress controller to be ready..."
        kubectl wait --namespace ingress-nginx \
          --for=condition=ready pod \
          --selector=app.kubernetes.io/component=controller \
          --timeout=300s

  _setup-kind-load-balancer:
    internal: true
    silent: true
    cmds:
      - |
        echo "Kind uses port forwarding instead of load balancers"
        echo "Ingress is accessible via localhost:80 and localhost:443"

  _setup-aws-load-balancer:
    internal: true
    silent: true
    cmds:
      - |
        echo "Setting up AWS Load Balancer"
        echo "AWS Load Balancer Controller will be installed in Platform phase"

  _setup-gcp-load-balancer:
    internal: true
    silent: true
    cmds:
      - |
        echo "Setting up GCP Load Balancer"
        echo "GCP Load Balancer is managed automatically by GKE"

  _setup-azure-load-balancer:
    internal: true
    silent: true
    cmds:
      - |
        echo "Setting up Azure Load Balancer"
        echo "Azure Load Balancer is managed automatically by AKS"
